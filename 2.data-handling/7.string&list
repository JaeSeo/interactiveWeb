예전에 '문자열'을 배워보았는데요. 문자열도 생각해보면 '문자' + '열'이기 때문에 배열과 비슷한 속성들이 있습니다.

비슷한 점
배열처럼 대괄호로 인덱싱을 할 수 있습니다. 배열에서 0번 인덱스의 값과 1번 인덱스의 값을 출력하려고 하는 것처럼, 문자열의 0번 인덱스의 문자와 1번 인덱스의 문자를 출력해봅시다.

var text1 = 'Hello';
console.log(text1[0]);
console.log(text1[1]);
H
e
마치 배열처럼 동작하죠? 실제로 아래처럼 배열로 만들어도 똑같은 결과값이 출력됩니다.

var text2 = ['H', 'e', 'l', 'l', 'o'];
console.log(text2[0]);
console.log(text2[1]);
H
e
마찬가지로 배열의 길이를 받아오는 것과 문자열의 길이를 받아오는 것도 매우 유사합니다.

var text1 = 'Hello';
var text2 = ['H', 'e', 'l', 'l', 'o'];
console.log(text1.length);
console.log(text2.length);
5
5
자바스크립트에서는 문자열을 단순히 "Hello"라는 한 덩어리로 보는 것이 아니라, 다섯 개의 알파벳 집합으로 받아들인다는 의미이죠. 이 점을 활용하면 문자열을 조금 더 자유자재로 다루실 수 있을 겁니다!

다른 점
물론 위의 text1과 text2가 완벽하게 동일한 것은 아닙니다. 엄연히 하나는 문자열이고 하나는 배열이니까요. typeof를 사용하면 이 사실을 확인할 수 있습니다.

console.log(typeof text1)
console.log(typeof text2)
string
object
비교 연산자인 ==을 사용해봐도 둘이 다르다는 걸 알 수 있습니다.

console.log(text1 == text2);
false
이 둘은 각 글자에 접근하는 방식만 동일한 것이고, 엄연히 다른 존재입니다.

mutable vs. immutable
또 다른 큰 차이점이 있습니다. 배열은 'mutable(바뀔 수 있는)' 자료형인 반면 문자열은 'immutable(바뀔 수 없는)' 자료형입니다.

첫 글자를 바꾸려 해보면, 배열인 text1의 첫 글자는 바뀌고 문자열인 text2의 첫 글자는 안 바뀝니다.

이런 차이는 에러로 이어질 수 있기 때문에 유의해서 사용해야 합니다.

// 배열은 mutable
var text1 = ['h', 'e', 'l', 'l', 'o'];
text1[0] = 'b';
console.log(text1);

// 문자열은 immutable
var text2 = 'hello';
text2[0] = 'b';
console.log(text2);
["b", "e", "l", "l", "o"]
hello